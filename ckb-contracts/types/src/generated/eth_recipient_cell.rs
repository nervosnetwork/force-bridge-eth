// Generated by Molecule 0.6.1
#![allow(clippy::all)]

use super::basic::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct ETHRecipientCellData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ETHRecipientCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ETHRecipientCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ETHRecipientCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "eth_recipient_address",
            self.eth_recipient_address()
        )?;
        write!(f, ", {}: {}", "eth_token_address", self.eth_token_address())?;
        write!(f, ", {}: {}", "token_amount", self.token_amount())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for ETHRecipientCellData {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        ETHRecipientCellData::new_unchecked(v.into())
    }
}
impl ETHRecipientCellData {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 4] = [20, 20, 16, 16];
    pub const FIELD_COUNT: usize = 4;
    pub fn eth_recipient_address(&self) -> ETHAddress {
        ETHAddress::new_unchecked(self.0.slice(0..20))
    }
    pub fn eth_token_address(&self) -> ETHAddress {
        ETHAddress::new_unchecked(self.0.slice(20..40))
    }
    pub fn token_amount(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(40..56))
    }
    pub fn fee(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(56..72))
    }
    pub fn as_reader<'r>(&'r self) -> ETHRecipientCellDataReader<'r> {
        ETHRecipientCellDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ETHRecipientCellData {
    type Builder = ETHRecipientCellDataBuilder;
    const NAME: &'static str = "ETHRecipientCellData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ETHRecipientCellData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ETHRecipientCellDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ETHRecipientCellDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .eth_recipient_address(self.eth_recipient_address())
            .eth_token_address(self.eth_token_address())
            .token_amount(self.token_amount())
            .fee(self.fee())
    }
}
#[derive(Clone, Copy)]
pub struct ETHRecipientCellDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ETHRecipientCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ETHRecipientCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ETHRecipientCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "eth_recipient_address",
            self.eth_recipient_address()
        )?;
        write!(f, ", {}: {}", "eth_token_address", self.eth_token_address())?;
        write!(f, ", {}: {}", "token_amount", self.token_amount())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, " }}")
    }
}
impl<'r> ETHRecipientCellDataReader<'r> {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 4] = [20, 20, 16, 16];
    pub const FIELD_COUNT: usize = 4;
    pub fn eth_recipient_address(&self) -> ETHAddressReader<'r> {
        ETHAddressReader::new_unchecked(&self.as_slice()[0..20])
    }
    pub fn eth_token_address(&self) -> ETHAddressReader<'r> {
        ETHAddressReader::new_unchecked(&self.as_slice()[20..40])
    }
    pub fn token_amount(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[40..56])
    }
    pub fn fee(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[56..72])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ETHRecipientCellDataReader<'r> {
    type Entity = ETHRecipientCellData;
    const NAME: &'static str = "ETHRecipientCellDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ETHRecipientCellDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ETHRecipientCellDataBuilder {
    pub(crate) eth_recipient_address: ETHAddress,
    pub(crate) eth_token_address: ETHAddress,
    pub(crate) token_amount: Uint128,
    pub(crate) fee: Uint128,
}
impl ETHRecipientCellDataBuilder {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 4] = [20, 20, 16, 16];
    pub const FIELD_COUNT: usize = 4;
    pub fn eth_recipient_address(mut self, v: ETHAddress) -> Self {
        self.eth_recipient_address = v;
        self
    }
    pub fn eth_token_address(mut self, v: ETHAddress) -> Self {
        self.eth_token_address = v;
        self
    }
    pub fn token_amount(mut self, v: Uint128) -> Self {
        self.token_amount = v;
        self
    }
    pub fn fee(mut self, v: Uint128) -> Self {
        self.fee = v;
        self
    }
}
impl molecule::prelude::Builder for ETHRecipientCellDataBuilder {
    type Entity = ETHRecipientCellData;
    const NAME: &'static str = "ETHRecipientCellDataBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.eth_recipient_address.as_slice())?;
        writer.write_all(self.eth_token_address.as_slice())?;
        writer.write_all(self.token_amount.as_slice())?;
        writer.write_all(self.fee.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ETHRecipientCellData::new_unchecked(inner.into())
    }
}
