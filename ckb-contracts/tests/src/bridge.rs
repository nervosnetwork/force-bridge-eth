use super::*;
use ckb_testtool::context::Context;
use ckb_tool::ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*};
use force_eth_types::generated::basic;
use force_eth_types::generated::eth_bridge_lock_cell::ETHBridgeLockArgs;
use force_eth_types::generated::eth_bridge_type_cell::{ETHBridgeTypeArgs, ETHBridgeTypeData};

const MAX_CYCLES: u64 = 1_000_000_000;

#[test]
fn test_mint_mode_without_typescript() {
    // deploy contract
    let mut context = Context::default();

    // cell deps
    let bridge_lock: Bytes = Loader::default().load_binary("eth-bridge-lockscript");
    let bridge_lock_out_point = context.deploy_cell(bridge_lock);
    let bridge_lock_script_dep = CellDep::new_builder()
        .out_point(bridge_lock_out_point.clone())
        .build();
    let sudt_bin = include_bytes!("../../../offchain-modules/cli/deps/simple_udt");
    let sudt_outpoint = context.deploy_cell(sudt_bin.as_ref().into());
    let sudt_dep = CellDep::new_builder()
        .out_point(sudt_outpoint.clone())
        .build();

    // build input
    let bridge_lock_args = ETHBridgeLockArgs::new_builder().build();
    let bridge_lock_script = context
        .build_script(&bridge_lock_out_point, bridge_lock_args.as_bytes())
        .expect("script");
    let input_out_point = context.create_cell(
        CellOutput::new_builder()
            .capacity(1000u64.pack())
            .lock(bridge_lock_script.clone())
            .build(),
        Bytes::new(),
    );
    let input_outpoint_hex = hex::encode(input_out_point.as_slice());
    let input = CellInput::new_builder()
        .previous_output(input_out_point)
        .build();

    // build output
    let sudt_typescript = context
        .build_script(
            &sudt_outpoint,
            bridge_lock_script.calc_script_hash().as_bytes(),
        )
        .unwrap();
    let recipient_lockscript = Script::from_slice(&[
        73u8, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 155, 215, 224, 111, 62, 207, 75, 224,
        242, 252, 210, 24, 139, 35, 241, 185, 252, 200, 142, 93, 75, 101, 168, 99, 123, 23, 114,
        59, 189, 163, 204, 232, 1, 20, 0, 0, 0, 200, 50, 138, 171, 205, 155, 158, 142, 100, 251,
        197, 102, 196, 56, 92, 59, 222, 178, 25, 215,
    ])
    .unwrap();
    let outputs = vec![
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .type_(Some(sudt_typescript.clone()).pack())
            .lock(recipient_lockscript)
            .build(),
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .type_(Some(sudt_typescript).pack())
            .lock(Script::new_builder().build())
            .build(),
    ];
    let mut recipient_cell_data = 90u128.to_le_bytes().to_vec();
    recipient_cell_data.extend(b"sudt_extra_data");
    let outputs_data = vec![recipient_cell_data.pack(), 10u128.to_le_bytes().pack()];

    // build transaction
    let raw_witness = format!(
        "a112000010000000a1120000a11200008d1200008d1200001000000011000000881200000073120000731200001c000000240000006c020000740200000b07000029090000020000000000000044020000f9024194eab52f0d5c0f03c273372309b522a935f5b6ce12f863a0413055b58d692937cc2a7d80ca019c17e8d01175e58d11f157ae9124078b01d6a00000000000000000000000003dc3d2369b6d9879e593c3a133055e0f03a52a74a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11b901c00000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000049490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024{}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f737564745f65787472615f64617461000000000000000000000000000000000083307832000000000000000093040000f904900182e4a1bf90386f89f943dc3d2369b6d9879e593c3a133055e0f03a52a74f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11a0000000000000000000000000eab52f0d5c0f03c273372309b522a935f5b6ce12a0000000000000000000000000000000000000000000000000000000000000006483307830f89f943dc3d2369b6d9879e593c3a133055e0f03a52a74f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11a0000000000000000000000000eab52f0d5c0f03c273372309b522a935f5b6ce12a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9b83307831f9024194eab52f0d5c0f03c273372309b522a935f5b6ce12f863a0413055b58d692937cc2a7d80ca019c17e8d01175e58d11f157ae9124078b01d6a00000000000000000000000003dc3d2369b6d9879e593c3a133055e0f03a52a74a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11b901c00000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000049490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024{}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f737564745f65787472615f646174610000000000000000000000000000000000833078321a020000f90217a0e8209e8ba120deca179d1c0f8248370e69594740303d715c82478ab688f98acaa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479417c4b5ce0605f63732bfd175fece7ac6b4620fd2a03d00738996d0850df92e2779d19ec93ceec66691ba47fd4e0e6432c4b29c6578a02fdba7068f898f53d9a31eb668bae958abc936c4a442892c90a2c02a532b3fe0a0b42673154673a3e33a756ffb4972b681d3d9c2d1c329d19f1112bfa57df84223bfdca82161e855c27f11e2382e4a1845fb378749ad98301090e846765746888676f312e31342e328664617277696ea0abfc66e238408a1c1a3e7e8ceee46e0f2018e87802765c5700c0afce457a47ea8811c9b892077fffba4a090000080000003e
        &input_outpoint_hex,
        &input_outpoint_hex,
    );
    let witness = hex::decode(raw_witness).unwrap();
    dbg!(witness.len());
    let tx = TransactionBuilder::default()
        .cell_dep(sudt_dep)
        .cell_dep(bridge_lock_script_dep)
        .input(input)
        .outputs(outputs)
        .outputs_data(outputs_data)
        .witness(witness.pack())
        .build();
    // let tx = context.complete_tx(tx);

    // run
    let cycles = context
        .verify_tx(&tx, MAX_CYCLES)
        .expect("pass verification");
    println!("consume cycles: {}", cycles);
}

#[test]
fn test_mint_mode_with_typescript() {
    // deploy contract
    let mut context = Context::default();

    // cell deps
    let bridge_type: Bytes = Loader::default().load_binary("eth-bridge-typescript");
    let bridge_type_out_point = context.deploy_cell(bridge_type);
    let bridge_type_script_dep = CellDep::new_builder()
        .out_point(bridge_type_out_point.clone())
        .build();
    let bridge_lock: Bytes = Loader::default().load_binary("eth-bridge-lockscript");
    let bridge_lock_out_point = context.deploy_cell(bridge_lock);
    let bridge_lock_script_dep = CellDep::new_builder()
        .out_point(bridge_lock_out_point.clone())
        .build();
    let sudt_bin = include_bytes!("../../../offchain-modules/cli/deps/simple_udt");
    let sudt_outpoint = context.deploy_cell(sudt_bin.as_ref().into());
    let sudt_dep = CellDep::new_builder()
        .out_point(sudt_outpoint.clone())
        .build();

    // build input
    let recipient_lockscript = Script::from_slice(&[
        73u8, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 155, 215, 224, 111, 62, 207, 75, 224,
        242, 252, 210, 24, 139, 35, 241, 185, 252, 200, 142, 93, 75, 101, 168, 99, 123, 23, 114,
        59, 189, 163, 204, 232, 1, 20, 0, 0, 0, 200, 50, 138, 171, 205, 155, 158, 142, 100, 251,
        197, 102, 196, 56, 92, 59, 222, 178, 25, 215,
    ])
    .unwrap();
    dbg!(hex::encode(recipient_lockscript.as_slice()));
    let bridge_lock_args = ETHBridgeLockArgs::new_builder().build();
    let bridge_lock_script = context
        .build_script(&bridge_lock_out_point, bridge_lock_args.as_bytes())
        .expect("script");
    let bridge_type_args = ETHBridgeTypeArgs::new_builder()
        .bridge_lock_hash(
            basic::Byte32::from_slice(bridge_lock_script.calc_script_hash().as_slice()).unwrap(),
        )
        .recipient_lock_hash(
            basic::Byte32::from_slice(recipient_lockscript.calc_script_hash().as_slice()).unwrap(),
        )
        .build();
    let bridge_data = ETHBridgeTypeData::new_builder()
        .owner_lock_script(Script::new_builder().build().as_slice().to_vec().into())
        .fee(10.into())
        .build();
    let bridge_type_script = context
        .build_script(&bridge_type_out_point, bridge_type_args.as_bytes())
        .expect("script");
    let input_out_point = context.create_cell(
        CellOutput::new_builder()
            .capacity(1000u64.pack())
            .type_(Some(bridge_type_script).pack())
            .lock(bridge_lock_script.clone())
            .build(),
        bridge_data.as_bytes(),
    );
    let input_outpoint_hex = hex::encode(input_out_point.as_slice());
    let input = CellInput::new_builder()
        .previous_output(input_out_point)
        .build();

    // build output
    let sudt_typescript = context
        .build_script(
            &sudt_outpoint,
            bridge_lock_script.calc_script_hash().as_bytes(),
        )
        .unwrap();
    let outputs = vec![
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .type_(Some(sudt_typescript.clone()).pack())
            .lock(recipient_lockscript)
            .build(),
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .type_(Some(sudt_typescript).pack())
            .lock(Script::new_builder().build())
            .build(),
    ];
    let mut recipient_cell_data = 90u128.to_le_bytes().to_vec();
    recipient_cell_data.extend(b"sudt_extra_data");
    let outputs_data = vec![recipient_cell_data.pack(), 10u128.to_le_bytes().pack()];

    // build transaction
    let raw_witness = format!(
        "a112000010000000a1120000a11200008d1200008d1200001000000011000000881200000073120000731200001c000000240000006c020000740200000b07000029090000020000000000000044020000f9024194eab52f0d5c0f03c273372309b522a935f5b6ce12f863a0413055b58d692937cc2a7d80ca019c17e8d01175e58d11f157ae9124078b01d6a00000000000000000000000003dc3d2369b6d9879e593c3a133055e0f03a52a74a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11b901c00000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000049490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024{}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f737564745f65787472615f64617461000000000000000000000000000000000083307832000000000000000093040000f904900182e4a1bf90386f89f943dc3d2369b6d9879e593c3a133055e0f03a52a74f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11a0000000000000000000000000eab52f0d5c0f03c273372309b522a935f5b6ce12a0000000000000000000000000000000000000000000000000000000000000006483307830f89f943dc3d2369b6d9879e593c3a133055e0f03a52a74f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11a0000000000000000000000000eab52f0d5c0f03c273372309b522a935f5b6ce12a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9b83307831f9024194eab52f0d5c0f03c273372309b522a935f5b6ce12f863a0413055b58d692937cc2a7d80ca019c17e8d01175e58d11f157ae9124078b01d6a00000000000000000000000003dc3d2369b6d9879e593c3a133055e0f03a52a74a000000000000000000000000046beac96b726a51c5703f99ec787ce12793dae11b901c00000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000049490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce80114000000c8328aabcd9b9e8e64fbc566c4385c3bdeb219d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024{}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f737564745f65787472615f646174610000000000000000000000000000000000833078321a020000f90217a0e8209e8ba120deca179d1c0f8248370e69594740303d715c82478ab688f98acaa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479417c4b5ce0605f63732bfd175fece7ac6b4620fd2a03d00738996d0850df92e2779d19ec93ceec66691ba47fd4e0e6432c4b29c6578a02fdba7068f898f53d9a31eb668bae958abc936c4a442892c90a2c02a532b3fe0a0b42673154673a3e33a756ffb4972b681d3d9c2d1c329d19f1112bfa57df84223bfdca82161e855c27f11e2382e4a1845fb378749ad98301090e846765746888676f312e31342e328664617277696ea0abfc66e238408a1c1a3e7e8ceee46e0f2018e87802765c5700c0afce457a47ea8811c9b892077fffba4a090000080000003e
        &input_outpoint_hex,
        &input_outpoint_hex,
    );
    let witness = hex::decode(raw_witness).unwrap();
    dbg!(witness.len());
    let tx = TransactionBuilder::default()
        .cell_dep(bridge_lock_script_dep)
        .cell_dep(bridge_type_script_dep)
        .cell_dep(sudt_dep)
        .input(input)
        .outputs(outputs)
        .outputs_data(outputs_data)
        .witness(witness.pack())
        .build();
    // let tx = context.complete_tx(tx);

    // run
    let cycles = context
        .verify_tx(&tx, MAX_CYCLES)
        .expect("pass verification");
    println!("consume cycles: {}", cycles);
}
